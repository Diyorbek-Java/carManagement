name: Deploy to Production

on:
  push:
    branches:
      - main

permissions:
  contents: read
  packages: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Create .env file
        run: |
          echo "DEBUG=False" >> .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "ALLOWED_HOSTS=*" >> .env
          echo "CORS_ALLOW_ALL_ORIGINS=False" >> .env
          echo "SQL_ENGINE=django.db.backends.postgresql" >> .env
          echo "SQL_DATABASE=${{ secrets.SQL_DATABASE }}" >> .env
          echo "SQL_USERNAME=${{ secrets.SQL_USERNAME }}" >> .env
          echo "SQL_PASSWORD=${{ secrets.SQL_PASSWORD }}" >> .env
          echo "SQL_HOST=${{ secrets.SQL_HOST }}" >> .env
          echo "SQL_PORT=${{ secrets.SQL_PORT }}" >> .env
          echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}" >> .env
          echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> .env

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ghcr.io/digitals-group/back-end:latest

      # Only copy essential config files to server
      - name: Copy config files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          source: ".env,docker-compose.yml,nginx/"
          target: "/opt/backend/"

      # Deploy using the pre-built image from GitHub Container Registry
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /opt/backend
            
            # Stop the existing containers
            docker-compose down
            
            # Login to GitHub Container Registry to access private images
            echo "${{ secrets.PACKAGES_READ_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Create or update the docker-compose.yml file to use the pre-built image
            cat > docker-compose.yml << 'EOF'
            version: '3.3'

            services:
              db:
                image: postgres:14
                volumes:
                  - postgres_data:/var/lib/postgresql/data/
                environment:
                  - POSTGRES_USER=${SQL_USERNAME}
                  - POSTGRES_PASSWORD=${SQL_PASSWORD}
                  - POSTGRES_DB=${SQL_DATABASE}
                ports:
                  - "5432:5432"
                healthcheck:
                  test: ["CMD-SHELL", "pg_isready -U ${SQL_USERNAME:-postgres}"]
                  interval: 5s
                  timeout: 5s
                  retries: 5
                restart: unless-stopped
                networks:
                  - backend_network

              web:
                image: ghcr.io/digitals-group/back-end:latest
                restart: unless-stopped
                volumes:
                  - static_volume:/app/staticfiles
                  - media_volume:/app/media
                env_file:
                  - .env
                environment:
                  - SQL_HOST=db
                  - SQL_PORT=5432
                depends_on:
                  db:
                    condition: service_healthy
                networks:
                  - backend_network
                  - frontend_network

              nginx:
                image: nginx:stable
                ports:
                  - "8000:8000"
                volumes:
                  - ./nginx/conf.d:/etc/nginx/conf.d
                  - static_volume:/static
                  - media_volume:/media
                depends_on:
                  - web
                networks:
                  - frontend_network

            volumes:
              postgres_data:
              static_volume:
              media_volume:

            networks:
              backend_network:
              frontend_network:
            EOF
            
            # Allow port 8000 in firewall if needed
            ufw allow 8000/tcp || true
            
            # Pull the latest image and start services
            docker-compose pull
            docker-compose up -d
            
            # Watch the logs to check for errors
            docker-compose logs --tail=50 web
